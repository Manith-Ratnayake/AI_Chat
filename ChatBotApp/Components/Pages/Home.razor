@page "/"
@inject IJSRuntime JSRuntime
@using FlintecChatBotApp.Components.Models;
@using System.Linq;
@using Microsoft.JSInterop;
@using System.Globalization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<MyStrings> Localizer


<div data-name="a" 
     style="background-color: azure; display: flex; height:100vh; ">

    <div data-name="b"
         style="background-color:#1a1c1b; width:@(isBVisible ? "17%" : "0%"); height:100%;  transition: width 0.3s ease;
                position:relative; overflow:hidden;
                display:flex; flex-direction: column; ">


        @if (isBVisible)
        {

            <div style="">
                <div class="icon-container">

                    <div class="icon-wrapper">
                        <img class="newIcon" @onclick="bOff" src="WebIcons/sidebar.png" style="height:20px; width:20px; filter: var(--background3-color);" alt="SideBar"
                        > @*  data-bs-toggle="tooltip" data-bs-placement="top" title="Close sidebar " *@
                        <span class="tooltip-text">Open Sidebar</span>
                    </div>

                    <div class="icon-wrapper">
                        <img class="newIcon" @onclick="CreateNewConversation" src="WebIcons/new.png" style="height:20px; width:20px; filter: grayscale(100%) brightness(60%) contrast(90%);" alt="New Chat"
                             data-bs-toggle="tooltip" data-bs-placement="top" title="Newchat" />
                        @* <span class="tooltip-text" style="left: 65px;">New chat</span> *@
                    </div>

                </div>
            </div>



            <div data-name="Tabs"
                 style="overflow-y: visible; ">


                @foreach (var dict in userConversation.conversations.Select((conversation, listIndex) => new { conversation, listIndex }))
                {


                    <div class="chatTabHover"
                         data-comment="Show this only when hovering"
                         style="display: inline-flex; position: relative; margin-top: 8px; margin-left: 20px; padding:7px;
                                background-color: var(--background2-color); border-radius:10px;">

                        <span class="ChatTab"
                              style="background-color: none; transition: background-color 0.3s ease;
                                     cursor: pointer; position: relative; left: 0; color:var(--font-color)"
                              @onclick="() => GetConversation(dict.listIndex)">

                            @(string.Join(" ", dict.conversation).Length > 27
                                ? string.Join(" ", dict.conversation).Substring(0, 27)
                                : string.Join(" ", dict.conversation))

                            <span class="dots" @onclick="() => TogglePopup(dict.listIndex)"
                                  style="cursor: pointer; color: var(--font-color); position: absolute; right: 0; z-index: 100;"
                                  data-bs-toggle="tooltip" data-bs-placement="top" title="Options">
                                ...
                            </span>

                        </span>
                    </div>



                @if (popupIndex == dict.listIndex)
                {
                    <div style="
                                    position: fixed;
                                    z-index: 90000; 
                                    display: flex;
                                    flex-direction: column;
                                    gap: 8px;
                                    background-color: dimgrey;
                                    padding: 8px;
                                    border-radius: 4px;
                                    margin-left:15%;" id="popup233">


                        <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px;
                                    transition: background-color 0.1s; color:white;"
                                    onmouseover="this.style.backgroundColor='#e0e0e0'"
                                    onmouseout="this.style.backgroundColor='transparent'">
                            <img src="WebIcons/share.png" style="width: 10px; height: 10px; filter: var(--image-filter);" />
                            <button style="border: none; background: none; cursor: pointer; color:white;"
                                    @onclick="() => {}">
                                Share
                            </button>
                        </div>


                        <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px; transition: background-color 0.1s;"
                                        onmouseover="this.style.backgroundColor='#e0e0e0'"
                                        onmouseout="this.style.backgroundColor='transparent'">
                            <img src="WebIcons/edit.png" style="width: 20px; height: 20px;" />
                            <button style="border: none; background: none; cursor: pointer;"
                                    @onclick="() => {}">
                                    Rename</button>
                        </div>


                        <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px; transition: background-color 0.1s;"
                                onmouseover="this.style.backgroundColor='#e0e0e0'"
                                onmouseout="this.style.backgroundColor='transparent'">                             
                            <img src="WebIcons/archive.png" style="width: 20px; height: 20px;" />
                            <button style="border: none; background: none; cursor: pointer;"
                                        @onclick="() => {}">Archive</button>
                        </div>


                        <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px; transition: background-color 0.1s;"
                                onmouseover="this.style.backgroundColor='#e0e0e0'"
                                onmouseout="this.style.backgroundColor='transparent'">
                            <img src="WebIcons/delete.png" style="width: 20px; height: 20px;" />
                            <button style="border: none; background: none; cursor: pointer;"
                                    @onclick="() => userConversation.DeleteConversation(dict.listIndex)">
                                Delete
                            </button>
                        </div>
                    </div>
                }
                        
            }


            </div>

            <div style = "position:absolute; bottom: 0; width: 100%; background-color: var(--background1-color); height: 70px;" >

                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal"
                        style="all:unset; width:100%; height:100%; display:flex; justify-content:center; align-items:center; 
                               background-color:var(--background2-color); color:var(--font-color)"
                        @onclick="() => ShowSettingsPopup(true)"
                        onmouseover="this.style.backgroundColor='darkgrey'"
                        onmouseout="this.style.backgroundColor='grey'">
                   Settings
                </button>

                      
            </div >
                
        


            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content" style="background-color: var(--background1-color);">
                        <div style="display: flex; align-items: center; justify-content: space-between;">
                            <h1 style="color: var(--font-color);">Settings</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>

                        <div class="modal-body">
                            <Settings/>
                        </div>

                        <div style="display: flex; justify-content: flex-end; padding-right: 0;">
                            <div style="display: flex; gap: 10px;">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary">Save changes</button>
                            </div>
                        </div>




                    </div>
                </div>
            </div>
          




        }
    </div>

    <div class="c" style="background-color:var(--background1-color); width:@(isBVisible ? "83%" : "100%"); 
                            height:100vh; transition: width 0.3s ease;overflow:hidden;">
                            

        <div data-name="Header"
             style="display: inline-flex; align-items: center; height:10px;">
            @if (!isBVisible)
            {
                <div class="icon-container">

                    <div class="icon-wrapper">
                        <img class="newIcon" @onclick="bOff" src="WebIcons/sidebar.png" 
                             style="height:20px; width:20px; filter: grayscale(100%) brightness(60%) contrast(90%);" alt="SideBar" 
                             data-bs-toggle="tooltip" data-bs-placement="top" title="Open sidebar" />
                    </div>

                    <div class="icon-wrapper">
                        <img class="newIcon" @onclick="CreateNewConversation" src="WebIcons/new.png"
                             style="height:20px; width:20px; filter: grayscale(100%) brightness(60%) contrast(90%);" alt="New Chat" 
                             data-bs-toggle="tooltip" data-bs-placement="top" title="Newchat" />
                    </div>

                </div>

            }

            <h4 data-name="ChatMessageWindowHeader" style="margin: 0; color:white; font-size:18px;"><b>ABBC</b></h4>
        </div>


       
        @if (messages.Count > 0)
        {


            <div style="display: flex; flex-direction: column; position: relative; background-color: black; height: 100vh;">

                <div style="background-color: var(--background1-color); height: 85%; overflow: auto; flex-grow: 1; flex-shrink: 1;">
                
                    @foreach (var item in messages.Select((message, index) => new { message, index }))
                    {


                        if (item.index == 0 || item.index % 2 == 0)
                        {
                            <div class="UserMessages"
                                 style="background-color:coral; display:grid; grid-template-columns:1fr 700px 1fr">



                                <div style="background-color:var(--background1-color)"></div>


                                <div style="background-color:var(--background1-color); display:flex; align-items:center; position: relative">

                                    @if (editingIndex != item.index)
                                    {
                                        <div class="editIconContainer" style="background-color:var(--background1-color); position:relative; flex-grow: 1; height:100%;">

                                            <div class="editMessage"
                                                 style="cursor: pointer;
                                                        border-radius: 50%;
                                                        width: 25px; 
                                                        height: 25px; 
                                                        margin-right: 5px;
                                                        padding: 10px; 
                                                        position: absolute;
                                                        right: 0;
                                                        display:flex;
                                                        justify-content:center;
                                                        align-items:center;"
                                                onmouseover="this.style.backgroundColor='grey'"
                                                onmouseout="this.style.backgroundColor='transparent'"
                                                @onclick="()=> ToggleEditMoo(item.index)">
                                                <img src="WebIcons/edit.png" style="width: 10px; height: 10px;filter: brightness(0) invert(1);" />
                                            </div>
                                        </div>


                                        <div style="background-color:var(--background1-color); max-width:70%">

                                            <div style=" margin-left:auto">
                                                    <p style="word-wrap: break-word; overflow-wrap: break-word; background-color: var(--background3-color); color:var(--font-color);
                                                                padding: 9px 15px; border-radius: 19px;">
                                                        @item.message
                                                    </p>
                                                </div>

                                         </div>
                                    }


                                    else
                                    {
                                        <div style="display: flex; flex-direction: column; align-items: flex-end; width:100%; 
                                                    background-color: var(--background2-color); padding: 9px 15px; border-radius: 19px; margin: 0; word-break: break-word; overflow-wrap: break-word;">

                                            <textarea 
                                                style="margin: 0; word-wrap: break-word; overflow-wrap: break-word; width: 100%; resize:none">
                                                @item.message
                                            </textarea>

                                            <div data-name="WhenEditCliked" style="display: flex; gap: 10px; margin-top: 10px;">
                                                <button @onclick="CancelEditMoo" style=" all: unset; padding: 5px 10px; background-color:black; color:white; border-radius:50px;">Cancel</button>
                                                <button @onclick="SubmitEditMoo" style="all: unset; padding: 5px 10px; border-radius:50px; background-color:var(--font-color)">Submit</button>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div style="background-color:var(--background1-color)"></div>

                          
                             </div> 
                        }


                        else
                        {

                            <div data-name="Flintec Messages" 
                                 style="background-color:var(--background1-color); position:relative;
                                        display:grid; grid-template-columns: 1fr 700px 1fr">

                                <div style="background-color:var(--background1-color);
                                            position:relative">
                                                            
                                    <div data-name="flintec_logo_div"
                                         style="border: 1px solid black; height: 35px; width: 35px; border-radius: 50%; 
                                                display: flex; justify-content: center; align-items: center; border-color:var(--background2-color);                                                background-color: var(--background1-color);position:absolute; right:0; margin-right:5px;">
                                        <img src="WebIcons/flintec_logo.png" style="height: 22px; width: 22px;" />
                                    </div>

                                </div>

                                <div data-name="Respone Message div"
                                      style="margin-right: auto;  word-wrap: break-word;
                                            overflow-wrap: break-word; flex-grow:0;">
                               
                            
                                @if (item.index == messages.Count - 1)
                                    {

                                    <div style="background-color:var(--background1-color);">

                                            <p class="AnimationText" style="color:var(--font-color); text-align:start">@item.message  </p>
                                    
                                    </div>
                                    }


                                    else
                                    {
                                        <div style="background-color:var(--background1-color);">
                                            <p style="color:var(--font-color);">@item.message</p>
                                    </div>
                                    }

                                    <div data-name="Flintec Message Options" style="display: inline-flex; background-color:var(--background1-color);;">
                                       
                                        <!-- Speaker Icon with Tooltip -->
                                        <div style="width: 25px; height: 25px; border-radius: 5px; transition: background-color 0.3s;
                                                    display: flex; justify-content: center; align-items: center; cursor: pointer;"
                                             onmouseover="this.style.backgroundColor='lightgray'" onmouseout="this.style.backgroundColor='transparent'"
                                             data-bs-toggle="tooltip" data-bs-placement="bottom" title="Read aloud">
                                            <img src="WebIcons/speaker.png" style="width: 15px; height: 15px; color: black;" />
                                        </div>


                                       

                                        <!-- Copy Icon -->
                                        <div style="width: 25px; height: 25px; border-radius: 5px; transition: background-color 0.3s;
                                                    display: flex; justify-content: center; align-items: center; cursor: pointer;"
                                             onmouseover="this.style.backgroundColor='lightgray'" 
                                             onmouseout="this.style.backgroundColor='transparent'"
                                             data-bs-toggle="tooltip" data-bs-placement="bottom" title="Copy">
                                             <img src="WebIcons/copy.png" style="width: 15px; height: 15px; color: black;" @onclick="CopyTextToClipboard" />
                                        </div>

                              


                                        <!-- Thumbs Up Icon -->
                                        <div style="width: 25px; height: 25px; border-radius: 5px; transition: background-color 0.3s;
                                                   display: flex; justify-content: center; align-items: center; cursor: pointer;"
                                             onmouseover="this.style.backgroundColor='lightgray'" onmouseout="this.style.backgroundColor='transparent'"
                                             data-bs-toggle="tooltip" title="Good Response">
                                            <img src="WebIcons/thumbsup.png" style="width: 15px; height: 15px; color: black;" />
                                        </div>

                                        <!-- Thumbs Down Icon -->
                                        <div style="width: 25px; height: 25px; border-radius: 5px; transition: background-color 0.3s;
                                                      display: flex; justify-content: center; align-items: center; cursor: pointer;"
                                             onmouseover="this.style.backgroundColor='lightgray'" onmouseout="this.style.backgroundColor='transparent'"
                                             data-bs-toggle="tooltip" title="Bad Response">
                                            <img src="WebIcons/thumbsdown.png" style="width: 15px; height: 15px; color: black;" />
                                        </div>

                                        <!-- Reload Icon -->
                                        <div style="width: 25px; height: 25px; border-radius: 5px; transition: background-color 0.3s;
                                                     display: flex; justify-content: center; align-items: center; cursor: pointer;"
                                             onmouseover="this.style.backgroundColor='lightgray'" onmouseout="this.style.backgroundColor='transparent'"
                                             data-bs-toggle="tooltip" title="Reload">
                                            <img src="WebIcons/reload.png" style="width: 15px; height: 15px; color: black;" />
                                        </div>
                                    </div>


                                </div>

                                <div data-name="remaining space in right"
                                     style="background-color:var(--background1-color)">
                                </div>



                            </div>
                        }
                         }
               </div>
                
                <div data-comment="To positon the input holder" 
                     style="background-color:var(--background1-color); display:flex; justify-content:center;">

                    <div data-comment="Input holder"
                         style="position: relative; padding: 8px 21px 8px 21px; width:780px; border-radius: 50px;
                                    color:white;background-color: var(--background2-color); ">

                        <textarea class="textarAreaPlaceHolder"
                                  @bind="userQuestion"
                                  placeholder="Message Flintec AI"
                                  rows="1"
                                  style="width: 94%; max-height: 150px; padding: 5px;
                                             resize: none; overflow-y: hidden;
                                             background-color: var(--background2-color); color: white;"
                                  oninput="adjustHeight(this)">
                                </textarea>

                        <button style="position: absolute; bottom: 12px; right: 18px; width: 36px; height: 36px;
                                       border-radius: 50%; border: none; background-color: grey;
                                       outline: none; box-shadow: none; transition: none;"
                                @onclick="UserSubmitQuestion">
                            <img src="WebIcons/up_arrow.png" style="width: 20px; height: 20px;" alt="Submit">
                        </button>

                    </div>
                </div>


                <div style="background-color: var(--background1-color); text-align: center; color: white; width: 100%; padding: 6px;">
                    <p>@Localizer["Sign In For More Details"]</p>
                </div>
            </div>

      
         

        }
        else
        {

            <div style="background-color: var(--background1-color); min-height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                
                
                <div style="display: flex; flex-direction: column; align-items: center; width: 60%; flex: 1; justify-content: center;">
                    <p class="AnimationText SomeTexTo" onload="AnimateTextTyping" style="font-size: 30px; ">How Can I Help You?</p>


                    <div data-comment="To positon the input holder"
                         style="background-color:var(--background1-color); display:flex; justify-content:center;">

                        <div data-comment="Input holder"
                             style="position: relative; padding: 8px 21px 8px 21px; width:780px; border-radius: 50px;
                                    color:white;background-color: var(--background2-color); ">

                            <textarea class="textarAreaPlaceHolder"
                                      @bind="userQuestion"
                                      placeholder="Message Flintec AI"
                                      rows="1"
                                      style="width: 94%; max-height: 150px; padding: 5px;
                                             resize: none; overflow-y: hidden;
                                             background-color: var(--background2-color); color: white;"
                                      oninput="adjustHeight(this)">
                                    </textarea>

                            <button style="position: absolute; bottom: 12px; right: 18px; width: 36px; height: 36px;
                                       border-radius: 50%; border: none; background-color: grey;
                                       outline: none; box-shadow: none; transition: none;"
                                    @onclick="UserSubmitQuestion">
                                <img src="WebIcons/up_arrow.png" style="width: 20px; height: 20px;" alt="Submit">
                            </button>

                        </div>
                    </div>


                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                                   gap: 10px; width: 100%; margin-top: 20px; background-color: none;">

                        @foreach (var suggestion in suggestions)
                        {
                            <div class="SuggestionBlock"
                                 style="border: none; border-radius: 25px; padding: 10px;
                                        display: flex; justify-content: center; align-items: center;
                                        background-color: ; color: white;"
                                 @onclick="() => UpdateTheSearchBar(suggestion)">
                                <p style="margin: 0;">@suggestion</p>
                            </div>
                        }
                    </div>


                </div>
         


                <div style="background-color: var(--background1-color); text-align: center; color: white; width: 100%; padding: 6px;">
                    <p>@Localizer["Sign In For More Details"]</p>
                </div>


           </div>

        }

    </div>





</div>

<style>



</style>




<style>
    :root {
        --background1-color: #33322e;
        --background2-color: #47463f;
        --background3-color: #636258;
        --background4-color: #838a85;
        --font-color: white;
        --image-filter: brightness(0) invert(1);
    }
</style>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("AnimateTextTyping", "AnimationText");
        }
    }
}
<script>
    // Function to make all elements with a specified class visible
    window.showTextElements = function (className) {
        const elements = document.querySelectorAll(`.${className}`);
        elements.forEach((element) => {
            element.style.display = "block"; // Show each element
        });
    };

    // Function to start the typing animation on all elements with a specified class
    window.AnimateTextTyping = function (className) {
        const elements = document.querySelectorAll(`.${className}`);

        elements.forEach((node) => {
            const text = node.textContent;
            const chars = text.split("");
            node.innerHTML = "";
            node.classList.add("typing");
            let i = 0;

            const addNextChar = (i) => {
                let nextChar = chars[i] === "\n" ? "<br>" : chars[i];
                node.innerHTML += "<span>" + nextChar + "</span>";
                if (i < chars.length - 1) {
                    setTimeout(() => addNextChar(i + 1), 20 + Math.random() * 20);
                } else {
                    setTimeout(() => node.classList.remove("typing"), 20 + Math.random() * 20);
                }
            };

            addNextChar(i);
        });
    };
</script>





@code {
    private bool isSettingsPopupVisible = false;

    private void ShowSettingsPopup(bool show)
    {
        isSettingsPopupVisible = show;
    }





    private void ClosePopup()
    {
        isSettingsPopupVisible = false;
    }
}




<script>
    // Select all items
    const items = document.querySelectorAll('.ChatTab');

    // Add click event listener to each item
    items.forEach(item => {
        item.addEventListener('click', () => {
            // Remove 'active' class from all items
            items.forEach(i => i.classList.remove('active'));

            // Add 'active' class to the clicked item
            item.classList.add('active');
        });
    });
</script>





<script>
    function adjustHeight(textarea) {
        textarea.style.height = 'auto'; // Reset the height to auto for resizing
        const maxHeight = 150; // Set your max height here
        const newHeight = Math.min(textarea.scrollHeight, maxHeight);

        textarea.style.height = newHeight + 'px';

        // Enable or disable scrollbar based on current height
        textarea.style.overflowY = (newHeight >= maxHeight) ? 'auto' : 'hidden';
    }
</script>






<style>
    /* Show the child .edit-icon when hovering over .parent-1 */
    .UserMessages:hover .editMessage {
        opacity: 1;
        pointer-events: auto;
    }
</style>



@code {
    public void UpdateTheSearchBar(string suggestion)
    {
        userQuestion = suggestion;
    }
}




<style>

</style>







<script>

    function autoResizeTextArea(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = (textarea.scrollHeight) + 'px';
    }



</script>


<script>
    const textareas = document.querySelectorAll("textarea");
    const maxHeight = 200;

    textareas.forEach(textarea => {
        textarea.addEventListener("input", () => {
            textarea.style.height = "59px"; // Reset height to minimum
            textarea.style.height = `${Math.min(textarea.scrollHeight, maxHeight)}px`;
            textarea.style.overflow = textarea.scrollHeight > maxHeight ? "auto" : "hidden";
        });
    });
</script>





@code {
   private List<string> suggestions = new List<string>
{
    "Password Policy",
    "Backup Policy",
    "Microsoft 0365 Policy",
    "Acceptable Use Policy"
};

}

@code {

    private async Task ResizeTextArea(ChangeEventArgs e) {}
    private async Task CopyTextToClipboard() {}
}




<style>
   
</style>



@code {

    private string sendButtonColor { get; set; } = "gray"; 
    private int clickedTimes = 0;

    private void UpdateButtonColor()
    {
        JSRuntime.InvokeVoidAsync("console.log", "Send Button clicked");
        sendButtonColor = string.IsNullOrWhiteSpace(userQuestion) ? "red" : "pink";

        if (string.IsNullOrWhiteSpace(userQuestion))
        {
            JSRuntime.InvokeVoidAsync("console.log", $"{clickedTimes} red");

            JSRuntime.InvokeVoidAsync("console.log", $"content : {userQuestion} ");


        }

        else
        {
            JSRuntime.InvokeVoidAsync("console.log", $"{clickedTimes} Pink");
            JSRuntime.InvokeVoidAsync("console.log", $"content : {userQuestion} ");


        }
        clickedTimes++;

    }




}


@code {
    private bool isBVisible = true;

    public void bOff()
    {
        isBVisible = !isBVisible;
    }
}


@code {

    public bool isSliderVisible = true;

    public void Slider()
    {
        if (isSliderVisible == true)
            isSliderVisible = false;

        else
            isSliderVisible = true;
    }

}




<style>

</style>




<style>
 

</style>



@code {
    private int popupIndex = -1;

    private void TogglePopup(int index)
    {
        popupIndex = popupIndex == index ? -1 : index; 
    }

    private void DoSomething(int index)
    {
    }
}

 @code {
    private int? activeIndex = null;
    private int? currentIndex = null; 

    private void SetActiveParagraph(int index)
    {
        activeIndex = index;
        currentIndex = index; 
    }
}


<style>



</style>

@code {
    private int? editingIndex = null;

    private void ToggleEditMoo(int index)
    {
        editingIndex = index;
    }

    private void CancelEditMoo()
    {
        editingIndex = null;
    }

    private void SubmitEditMoo()
    {
        editingIndex = null;
    }
}

<script>
        let popupIndex = null; // Initial value to track which popup is open, if any

    // Function to toggle popup visibility
    function TogglePopup(index) {
        // Set popupIndex to the clicked item's index, or null if it should be closed
        popupIndex = popupIndex === index ? null : index;

        // Get the popup element
        const popup = document.getElementById("popup233");

        // Show or hide the popup based on the updated popupIndex
        if (popupIndex !== null) {
            popup.style.display = "block";
        } else {
            popup.style.display = "none";
        }
    }

    // Event listener to close the popup if clicking outside
    document.addEventListener("click", function (event) {
        const popup = document.getElementById("popup233");
        const togglePopupButton = document.querySelector('.dots');

        // Close the popup if the click is outside both the popup and toggle button
        if (popup && !popup.contains(event.target) && !togglePopupButton.contains(event.target)) {
            popupIndex = null; // Set popupIndex to null
            popup.style.display = "none"; // Hide the popup
        }
    });

    // Sample toggle button to open/close the popup (for demonstration purposes)
    document.querySelector('.dots').addEventListener('click', function (event) {
        event.stopPropagation(); // Prevent the click from triggering document's listener
        TogglePopup(1); // Toggle popup visibility for demonstration
    });


</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


<script>
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl)
    })
</script>




