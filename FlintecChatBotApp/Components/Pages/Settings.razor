@using FlintecChatBotApp.Resources.Languages
@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<MyStrings> Localizer




@if (IsVisible)
{
    <div class="overlay"></div> <!-- Background overlay -->
    <div class="popup-bar">


        <h4>Settings</h4>


        <button @onclick="HidePopup">&times;</button>



        <h1>@Localizer["Hi"]</h1>
        <h1>@Localizer["Hello"]</h1>
        <h1>@Localizer["String2"]</h1>


        <select class="form-control" @bind="Culture">
            @foreach (var culture in cultures)
            {
                <option value="@culture">@culture</option>
            }
        </select>





        <select>
            <option value="">Select a language...</option>
            <option value="en">English (de facto)</option>
            <option value="fr">France: French</option>
            <option value="en-uk">UK: English</option>
            <option value="es">Spain: Spanish (Castilian)</option>
        </select>


        <select>
            <option value="">Select a language...</option>
            <option value="en">English (de facto)</option>
            <option value="fr">France: French</option>
            <option value="en-uk">UK: English</option>
            <option value="es">Spain: Spanish (Castilian)</option>
        </select>


    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private async Task HidePopup()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}


 @code {




        CultureInfo[] cultures = new[]
        {
    new CultureInfo("en"),
    new CultureInfo("nl")
    };


        CultureInfo Culture
        {
            get => CultureInfo.CurrentCulture;


            set
            {
                if (CultureInfo.CurrentCulture != value)
                {
                    Thread.CurrentThread.CurrentCulture = value;
                    Thread.CurrentThread.CurrentCulture = value;
                    CultureInfo.DefaultThreadCurrentCulture = value;
                    CultureInfo.DefaultThreadCurrentUICulture = value;
                    Preferences.Set("language", value.Name);

                }
            }


        }


}



























<style>

    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent dark background */
        z-index: 999; /* Behind the popup */
    }










        /* CSS for Popup Bar */
    .popup-bar {
        position: fixed;
        top: 20%;
        left: 20%;
        width: 60%;
        height: 60%;
        background-color: #333;
        color: #fff;
        padding: 15px;
        text-align: center;
        font-size: 18px;
        z-index: 1000;
        box-sizing: border-box;
    }


    .popup-bar button {
        background: none;
        border: none;
        color: #fff;
        font-size: 24px;
        cursor: pointer;
        position: absolute;
        right: 15px;
        top: 10px;
    }

</style>