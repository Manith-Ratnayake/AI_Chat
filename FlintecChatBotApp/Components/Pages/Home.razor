@page "/"
@inject IJSRuntime JSRuntime
@using FlintecChatBotApp.Components.Models;
@using System.Linq;
@using Microsoft.JSInterop;
@using System.Globalization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<MyStrings> Localizer


<div data-name="a" 
     style="background-color:darkgray; display: flex; height:100vh; ">

    <div data-name="b"
         style="background-color:gray; width:@(isBVisible ? "20%" : "0%"); height:100%;  transition: width 0.3s ease;
                position:relative; overflow:hidden; z-index:0;
                display:flex; flex-direction: column; ">


        @if (isBVisible)
        {

            <div style="">
                <Icons OnCreateNewConversation="CreateNewConversation" OnbOff="bOff" IconMargin="margin-right: 100px;" />
            </div>

            <div data-name="Tabs"
                style="background-color:midnightblue; overflow-y: visible; ">


                @foreach (var dict in userConversation.conversations.Select((conversation, listIndex) => new { conversation, listIndex }))
                {


                    <div class="chatTabHover"
                         data-comment="Show this only when hovering"
                         style="display: inline-flex; position: relative; margin-top: 8px; margin-left: 20px; padding:7px;">

                        <span class="ChatTab"
                              style="background-color: lightgray; transition: background-color 0.3s ease;
                                     cursor: pointer; position: relative; left: 0;"
                              @onclick="() => GetConversation(dict.listIndex)">

                            @(string.Join(" ", dict.conversation).Length > 27
                                ? string.Join(" ", dict.conversation).Substring(0, 27)
                                : string.Join(" ", dict.conversation))

                            <span class="dots" @onclick="() => TogglePopup(dict.listIndex)"
                                  style="cursor: pointer; background-color: green; position: absolute; right: 0; z-index: 100;">
                                ...
                            </span>

                        </span>
                    </div>



                @if (popupIndex == dict.listIndex)
                {
                    <div style="
                                    position: fixed;
                                    z-index: 90000; 
                                    display: flex;
                                    flex-direction: column;
                                    gap: 8px;
                                    background-color: dimgrey;
                                    padding: 8px;
                                    border-radius: 4px;
                                    margin-left:15%;" id="popup233">


                        <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px;
                                    transition: background-color 0.1s; color:white;"
                                    onmouseover="this.style.backgroundColor='#e0e0e0'"
                                    onmouseout="this.style.backgroundColor='transparent'">
                            <img src="WebIcons/share.png" style="width: 10px; height: 10px; filter: brightness(0) invert(1);" />
                            <button style="border: none; background: none; cursor: pointer; color:white;"
                                    @onclick="() => {}">
                                Share
                            </button>
                        </div>


                        <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px; transition: background-color 0.1s;"
                                        onmouseover="this.style.backgroundColor='#e0e0e0'"
                                        onmouseout="this.style.backgroundColor='transparent'">
                            <img src="WebIcons/edit.png" style="width: 20px; height: 20px;" />
                            <button style="border: none; background: none; cursor: pointer;"
                                    @onclick="() => {}">
                                    Rename</button>
                        </div>


                        <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px; transition: background-color 0.1s;"
                                onmouseover="this.style.backgroundColor='#e0e0e0'"
                                onmouseout="this.style.backgroundColor='transparent'">                             
                            <img src="WebIcons/archive.png" style="width: 20px; height: 20px;" />
                            <button style="border: none; background: none; cursor: pointer;"
                                        @onclick="() => {}">Archive</button>
                        </div>


                        <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px; transition: background-color 0.1s;"
                                onmouseover="this.style.backgroundColor='#e0e0e0'"
                                onmouseout="this.style.backgroundColor='transparent'">
                            <img src="WebIcons/delete.png" style="width: 20px; height: 20px;" />
                            <button style="border: none; background: none; cursor: pointer;"
                                    @onclick="() => userConversation.DeleteConversation(dict.listIndex)">
                                Delete
                            </button>
                        </div>
                    </div>
                }
                        
            }

          



            </div>

            <div style = "position:absolute; bottom: 0; width: 100%; background-color: yellow; height: 70px;" >

               

                        <button style="width:100%; height:100%;"
                            @onclick = "() => ShowSettingsPopup(true)"
                            onmouseover = "this.style.backgroundColor='darkgrey'"
                            onmouseout = "this.style.backgroundColor='grey'" >
                            Settings
                        </button>
            </div >
                
            @if (isSettingsPopupVisible)
            {
                <!-- Overlay to capture clicks outside the dialog -->
                <div class="overlay" 
                    style="z-index:99999;"
                    @onclick="() => ShowSettingsPopup(false)"></div>

                <!-- Popup dialog -->
                <dialog class="MyPopup" open>
                    <div class="content"
                         style="z-index:99999;">


                         <Settings/>


                        <button @onclick="() => ShowSettingsPopup(false)">Close</button>
                    </div>
                </dialog>
            }

        }
    </div>

    <div class="c" style="background-color:darkgray; width:@(isBVisible ? "80%" : "100%"); 
                            height:100%; transition: width 0.3s ease;overflow:hidden;">
                            

        <div data-name="Header"
             style="display: inline-flex; align-items: center; height:10px;">
            @if (!isBVisible)
            {
                <Icons OnCreateNewConversation="CreateNewConversation" OnbOff="bOff" IconMargin="margin-right: 10px;" />

            }

            <h4 data-name="ChatMessageWindowHeader" style="margin: 0; font-size:18px;">Flintec</h4>
        </div>


       
        @if (messages.Count > 0)
        {

            
            <div style="display:flex; flex-direction:column; position:relative; background-color:mediumvioletred; height:100%">

                <div style="background-color:wheat; height:85%; overflow: auto; flex-shrink:1;">

                    @foreach (var item in messages.Select((message, index) => new { message, index }))
                    {


                        if (item.index == 0 || item.index % 2 == 0)
                        {
                            <div class="UserMessages"
                                 style="background-color:coral; display:grid; grid-template-columns:1fr 700px 1fr">



                                <div style="background-color:red"></div>


                                <div style="background-color:blue; display:flex; align-items:center; position: relative">

                                    @if (editingIndex != item.index)
                                    {
                                        <div class="editIconContainer" style="background-color:orange; position:relative; flex-grow: 1; height:100%;">

                                            <div class="editMessage"
                                                 style="cursor: pointer; border-radius: 15px; margin-right: 5px;
                                                        position:absolute; right:0;"
                                                 onmouseover="this.style.backgroundColor='grey'"
                                                 onmouseout="this.style.backgroundColor='transparent'"
                                                 @onclick="()=> ToggleEditMoo(item.index)">
                                                <img src="WebIcons/edit.png" style="width: 10px; height: 10px;" />
                                            </div>
                                        </div>


                                        <div style="background-color:pink; max-width:70%">

                                            <div style=" margin-left:auto">
                                                    <p style="word-wrap: break-word; overflow-wrap: break-word; background-color: lightslategrey;
                                                                padding: 9px 15px; border-radius: 19px;">
                                                        @item.message
                                                    </p>
                                                </div>

                                         </div>
                                    }


                                    else
                                    {
                                        <div style="display: flex; flex-direction: column; align-items: flex-end; width:100%; 
                                                    background-color: lightslategrey; padding: 9px 15px; border-radius: 19px; margin: 0; word-break: break-word; overflow-wrap: break-word;">

                                            <textarea 
                                                style="margin: 0; word-wrap: break-word; overflow-wrap: break-word; width: 100%; resize:none">
                                                @item.message
                                            </textarea>

                                            <div data-name="WhenEditCliked" style="display: flex; gap: 10px; margin-top: 10px;">
                                                <button @onclick="CancelEditMoo" style="padding: 5px 10px;">Cancel</button>
                                                <button @onclick="SubmitEditMoo" style="padding: 5px 10px;">Submit</button>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div style="background-color:red"></div>

                          
                             </div> 
                        }


                        else
                        {

                            <div data-name="Flintec Messages" 
                                 style="background-color:yellow; position:relative;
                                        display:grid; grid-template-columns: 1fr 700px 1fr">

                                <div style="background-color:olive;
                                            position:relative">
                                                            
                                    <div data-name="flintec_logo_div"
                                         style="border: 1px solid black; height: 35px; width: 35px; border-radius: 50%; 
                                                display: flex; justify-content: center; align-items: center;
                                                background-color: aqua;position:absolute; right:0; margin-right:5px;">
                                        <img src="WebIcons/flintec_logo.png" style="height: 22px; width: 22px;" />
                                    </div>

                                </div>

                                <div data-name="Respone Message div"
                                      style="margin-left: auto;  word-wrap: break-word;
                                            overflow-wrap: break-word; flex-grow:0;">
                               
                            
                                @if (item.index == messages.Count - 1)
                                    {

                                    <div style="background-color:cadetblue;">
                                          
                                        <p style="">@item.message</p>
                                    
                                    </div>
                                    }


                                    else
                                    {
                                    <div style="background-color:cadetblue;">
                                        <p class="">@item.message</p>
                                    </div>
                                    }

                                    <div data-name="Flintec Message Options"
                                         style="display: inline-flex; background-color:mediumvioletred; ">

                                            <div style="width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                                 onmouseover="this.style.backgroundColor='lightgray'"
                                                 onmouseout="this.style.backgroundColor='transparent'">
                                                <img src="WebIcons/speaker.png" style="width:20px; height:20px; color:black;" />
                                            </div>

                                            <div style="width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                                 onmouseover="this.style.backgroundColor='lightgray'"
                                                 onmouseout="this.style.backgroundColor='transparent'">
                                                <img src="WebIcons/copy.png"     @onclick="CopyTextToClipboard"
                                                     style="width:20px; height:20px; color:black;" />
                                            </div>

                                            <div style="width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                                 onmouseover="this.style.backgroundColor='lightgray'"
                                                 onmouseout="this.style.backgroundColor='transparent'">
                                                <img src="WebIcons/thumbsup.png" style="width:20px; height:20px; color:black;" />
                                            </div>

                                            <div style="width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                                 onmouseover="this.style.backgroundColor='lightgray'"
                                                 onmouseout="this.style.backgroundColor='transparent'">
                                                <img src="WebIcons/thumbsdown.png" style="width:20px; height:20px; color:black;" />
                                            </div>

                                            <div style="width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                                 onmouseover="this.style.backgroundColor='lightgray'"
                                                 onmouseout="this.style.backgroundColor='transparent'">
                                                <img src="WebIcons/reload.png" style="width:20px; height:20px; color:black;" />
                                            </div>

                                        </div>

                                </div>

                                <div data-name="remaining space in right"
                                     style="background-color:grey">
                                </div>



                            </div>
                        }
                    }
               </div>

                <div data-name="InputArea" style="background-color: blue; width: 100%;
                                                  display:flex; justify-content:center; flex-grow:1; flex-shrink:0 ">

                    <div class="wrapperTextArea"
                         style="display: flex; align-items: center; background-color: yellow; overflow: hidden;
                                flex: 1; position: relative; border-radius: 25px;
                                max-width:780px;">

                        <textarea @bind="userQuestion"
                                  placeholder="@Localizer["Message Flintec AI"]"
                                  style="resize: none; background-color: yellowgreen; margin-left: 5%; width: 87%; margin-right: 5%; overflow: hidden; line-height: 1.5;"
                                  rows="1">
                        </textarea>

                        <div style="position: absolute; right: 10px; width: 36px; height: 36px; border-radius: 50%; background-color: @sendButtonColor;"
                             @onclick="UserSubmitQuestion">
                            <img src="WebIcons/up_arrow.png" style="width: 20px; height: 20px;" alt="Submit" />
                        </div>
                    </div>
                </div>

                <div style="background-color: purple; text-align: center; color: white; width: 100%; margin-bottom:auto;">
                    <p>@Localizer["For more details"]</p>
                </div>

                </div>
         

        }
        else
        {

            <div style="background-color: tomato; min-height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                <div style="display: flex; flex-direction: column; align-items: center; width: 60%; flex: 1; justify-content: center;">

                    <p style="font-size: 30px;">How Can I Help You?</p>

                    <div data-name="InputArea" style="background-color: yellow; width: 100%; border-radius: 25px;">
                        <div class="wrapperTextArea"
                             style="display: flex; align-items: center; background-color: yellow; overflow: hidden; flex: 1; position: relative; border-radius: 25px;">

                            <textarea @bind="userQuestion"
                                      placeholder="@Localizer["Message Flintec AI"]"
                                      style="resize: none; background-color: yellowgreen; margin-left: 5%; width: 87%; margin-right: 5%; overflow: hidden; line-height: 1.5;"
                                      rows="1">
                             </textarea>

                            <div class="SendButton"
                                 style="position: absolute; right: 10px; width: 36px; height: 36px; border-radius: 50%; background-color: @sendButtonColor;"
                                 @onclick="UserSubmitQuestion">
                                <img src="WebIcons/up_arrow.png" style="width: 20px; height: 20px;" alt="Submit" />
                            </div>
                        </div>
                    </div>


                    <div style="display: flex; justify-content: space-between; flex-wrap: wrap;
                                     background-color: thistle; width: 100%; margin-top: 20px;">

                        @foreach (var suggestion in suggestions)
                        {
                            <div style="background-color: yellow; border: 2px solid purple; border-radius: 10px; padding: 10px;
                            margin: 5px; flex: 1; min-width: 150px; text-align: center;"
                                 @onclick="() => UpdateTheSearchBar(suggestion)">
                                @suggestion
                            </div>
                        }
                    </div>

                </div>
         



                <div style="background-color: purple; text-align: center; color: white; width: 100%; padding: 10px;">
                    <p>@Localizer["For more details"]</p>
                </div>


            </div>

        }

    </div>





</div>



<style>
    .chatTabHover:hover {
        background-color:pink;
        border-radius:8px;
    }
</style>



<style>
    .editIconContainer .editMessage {
        opacity: 0; /* Initial hidden state */
        transition: opacity 0.1s ease; /* Smooth transition */
    }

    .editIconContainer:hover .editMessage {
        opacity: 1; /* Make the edit icon visible on hover */
    }
</style>


<script>
@* 

    const dialog = document.querySelector('.MyPopup');
    const content = document.querySelector('.content');

     showSettingsPopUp = (show) => show ? dialog.showModal() : dialog.close();
    dialog.addEventListener('click', (e) => !content.contains(e.target) && dialog.close());

 *@
</script>



<style>
    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    .MyPopup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        border-radius: 8px;
        max-width: 400px;
        background: white;
        z-index: 999;
    }

    .content {
        text-align: center;
    }
</style>


@code {
    private bool isSettingsPopupVisible = false;

    private void ShowSettingsPopup(bool show)
    {
        isSettingsPopupVisible = show;
    }





    private void ClosePopup()
    {
        isSettingsPopupVisible = false;
    }
}






<style>
  

    .ChatTab {
      
    }


        .ChatTab:hover {
            background-color: palevioletred;
        }

        /* Change background color for active item */
        .ChatTab.active {
            background-color: yellow;
        }

    /* Style for the symbol */
    .dots {
        color: red;
        font-size: 16px;
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        visibility: hidden;
    }

    /* Show symbol when hovered or active */
    .ChatTab:hover .dots,
    .ChatTab.active .dots {
        visibility: visible;
        background-color:yellow;
    }
</style>




<script>
    // Select all items
    const items = document.querySelectorAll('.ChatTab');

    // Add click event listener to each item
    items.forEach(item => {
        item.addEventListener('click', () => {
            // Remove 'active' class from all items
            items.forEach(i => i.classList.remove('active'));

            // Add 'active' class to the clicked item
            item.classList.add('active');
        });
    });
</script>












<style>
    /* Show the child .edit-icon when hovering over .parent-1 */
    .UserMessages:hover .editMessage {
        opacity: 1;
        pointer-events: auto;
    }
</style>




@* 
@code {

    private bool isHoveredTab = false;

    protected  async Task ToggleVisibilityTab(bool hover)
    {
        isHoveredTab = hover;
        await JSRuntime.InvokeVoidAsync("console.log", "${isHoveredTab}");

    }
    

}
 *@



@code {
    public void UpdateTheSearchBar(string suggestion)
    {
        userQuestion = suggestion;
    }
}




<style>
    .wrapperTextArea textarea {
        width: 100%;
        height: 59px;
        padding: 15px;
        border-radius: 5px;
        outline: none;
        resize: none;
        overflow: hidden;
        transition: border-color 0.3s, padding 0.3s; 
        max-height: 200px; 
    }

        .wrapperTextArea textarea:focus,
        .wrapperTextArea textarea:valid {
            border-width: 2px;
            padding: 14px;
            border-color: red;
        }
</style>






<script>
    const textareas = document.querySelectorAll(".wrapperTextArea"); // Select all by class name
    const maxHeight = 200;

    textareas.forEach(textarea => {
        textarea.addEventListener("input", e => {
            textarea.style.height = "59px"; // Reset height
            let scHeight = e.target.scrollHeight;

            textarea.style.height = `${Math.min(scHeight, maxHeight)}px`;

            if (scHeight > maxHeight) {
                textarea.style.overflow = "auto";
            } else {
                textarea.style.overflow = "hidden";
            }
        });
    });
</script>







<script>
    const maxHeight = 59;

    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.tagName === "TEXTAREA") {
                    addAutoResize(node);
                }
            });
        });
    });

    // Start observing the body for added nodes
    observer.observe(document.body, { childList: true, subtree: true });

    function addAutoResize(textarea) {
        textarea.style.height = "59px"; // Set initial height
        textarea.addEventListener("input", (e) => {
            textarea.style.height = "59px"; // Reset height
            const scHeight = e.target.scrollHeight; // Get new scroll height

            textarea.style.height = `${Math.min(scHeight, maxHeight)}px`;

            if (scHeight > maxHeight) {
                textarea.style.overflow = "auto";
            } else {
                textarea.style.overflow = "hidden";
            }
        });
    }


</script>


<script>

    function autoResizeTextArea(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = (textarea.scrollHeight) + 'px';
    }



</script>




@code {
   private List<string> suggestions = new List<string>
{
    "What is the password policy?",
    "What are the policies for backup?",
    "What are the policies for Microsoft 0365?",
    "What is the acceptable use policy?"
};

}

@code {

    private async Task ResizeTextArea(ChangeEventArgs e)
    {
        //await JSRuntime.InvokeVoidAsync("autoResizeTextArea", e.Value);
    }



    private async Task CopyTextToClipboard()
    {
        string textToCopy = "This is the text to be copied to the clipboard.";
        await JSRuntime.InvokeVoidAsync("copyToClipboard", userAnswer);
    }
}


<script>

function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(function () {
        console.log('Text copied to clipboard: ' + text);
    }).catch(function (error) {
        console.error('Error copying text: ', error);
    });
}


</script>









@code {

    private string sendButtonColor { get; set; } = "gray"; // Default color
    private int clickedTimes = 0;

    private void UpdateButtonColor()
    {
        JSRuntime.InvokeVoidAsync("console.log", "Send Button clicked");
        sendButtonColor = string.IsNullOrWhiteSpace(userQuestion) ? "red" : "pink";

        if (string.IsNullOrWhiteSpace(userQuestion))
        {
            JSRuntime.InvokeVoidAsync("console.log", $"{clickedTimes} red");

            JSRuntime.InvokeVoidAsync("console.log", $"content : {userQuestion} ");


        }

        else
        {
            JSRuntime.InvokeVoidAsync("console.log", $"{clickedTimes} Pink");
            JSRuntime.InvokeVoidAsync("console.log", $"content : {userQuestion} ");


        }
        clickedTimes++;

    }




}


@code {
    private bool isBVisible = true;

    public void bOff()
    {
        isBVisible = !isBVisible;
    }
}


@code {

    public bool isSliderVisible = true;

    public void Slider()
    {
        if (isSliderVisible == true)
            isSliderVisible = false;

        else
            isSliderVisible = true;
    }




    // private bool isSettingsPopupVisible = false;

    // private void ShowSettingsPopup()
    // {
    //     isSettingsPopupVisible = true;
    // }

    // private void OnPopupVisibilityChanged(bool value)
    // {
    //     isSettingsPopupVisible = value;
    // }



}




<style>


    // Animation

    * {
        box-sizing: border-box;
        margin: 0;
    }

    .wrapper {
        /*   height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: white;
            margin: 0 5rem; */
    }

    #text {
        /* max-width: 800px;
        // text-align: left;
        // width: 100%; */
        color: black;
        font-family: monospace;
        -webkit-font-smoothing: antialiased;
        margin-bottom: 8rem;
    }

        #text.typing span:last-child {
            background-color: black;
        }
</style>

<script>
    window.animateTextTyping = (elementId) => {
        const node = document.getElementById(elementId);
        const text = node.textContent;
        const chars = text.split("");

        node.innerHTML = "";
        node.classList.add("typing");
        let i = 0;

        const addNextChar = (i) => {
            let nextChar = chars[i] === "\n" ? "<br>" : chars[i];
            node.innerHTML += "<span>" + nextChar + "</span>";
            if (i < chars.length - 1) {
                setTimeout(function () {
                    addNextChar(i + 1);
                }, 10 + Math.random() * 100);
            } else {
                setTimeout(function () {
                    node.classList.remove("typing");
                }, 10 + Math.random() * 150);
            }
        }

        addNextChar(i);
    }

    window.showText = (elementId) => {
        const node = document.getElementById(elementId);
        node.style.display = "block"; // Show the text element
    }
</script>

@code {

    public string lang = "nl";

    private async Task AnimateText()
    {
        try
        {
            // Show the text element first
            await JSRuntime.InvokeVoidAsync("showText", "text");

            // Then start the text animation
            await JSRuntime.InvokeVoidAsync("animateTextTyping", "text");
        }
        catch (Exception ex)
        {
            JSRuntime.InvokeVoidAsync("console.log", $"{ex.Message}"); // Log the error message to the console
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred: " + ex.Message);
        }
    }
}


<script>
    // Function to scroll to the bottom
     @* function scrollToBottom() {
         const messagesDiv = document.getElementById("messages");
         messagesDiv.scrollTop = messagesDiv.scrollHeight;
     } *@

    // Call scrollToBottom whenever new content is added
    // For example, after appending new messages
    //scrollToBottom();
</script>



<style>
    /* .dots {
        display: inline-block; /* Allows the dots to be inline with the paragraph */
        cursor: pointer; /* Change cursor to indicate clickable */
        margin-left: 5px; /* Space between paragraph and dots 
    } */

    .popup {
        position: absolute; /* Positioning the popup */
        background-color: white; /* Background color for popup */
        border: 1px solid #ccc; /* Optional border */
        padding: 10px; /* Padding inside the popup */
        z-index: 100; /* Ensure it appears above other elements */
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow for effect */
        margin-left:20px;
    }




    .paragraph {
        position: relative; 
    }

        .paragraph::after {
            content: ''; 
            position: absolute; 
            right: 0; 
            top: 50%; 
            transform: translateY(-50%); 
            opacity: 0;
            transition: opacity 0.3s ease;
            //background-color:"";
        }

        .paragraph:hover::after,
        .paragraph.highlighted::after {
            opacity: 1; 
        }

</style>



@code {
    private int popupIndex = -1;

    private void TogglePopup(int index)
    {
        popupIndex = popupIndex == index ? -1 : index; 
    }

    private void DoSomething(int index)
    {
    }
}

 @code {
    private int? activeIndex = null;
    private int? currentIndex = null; 

    private void SetActiveParagraph(int index)
    {
        activeIndex = index;
        currentIndex = index; 
    }
}


<style>

    //Tabs

    .hover-light p:hover,
    .paragraph.highlighted {
        transition: background-color 0.3s ease;
    }

</style>

@code {
    private int? editingIndex = null;

    private void ToggleEditMoo(int index)
    {
        editingIndex = index;
    }

    private void CancelEditMoo()
    {
        editingIndex = null;
    }

    private void SubmitEditMoo()
    {
        editingIndex = null;
    }
}

<script>
        let popupIndex = null; // Initial value to track which popup is open, if any

    // Function to toggle popup visibility
    function TogglePopup(index) {
        // Set popupIndex to the clicked item's index, or null if it should be closed
        popupIndex = popupIndex === index ? null : index;

        // Get the popup element
        const popup = document.getElementById("popup233");

        // Show or hide the popup based on the updated popupIndex
        if (popupIndex !== null) {
            popup.style.display = "block";
        } else {
            popup.style.display = "none";
        }
    }

    // Event listener to close the popup if clicking outside
    document.addEventListener("click", function (event) {
        const popup = document.getElementById("popup233");
        const togglePopupButton = document.querySelector('.dots');

        // Close the popup if the click is outside both the popup and toggle button
        if (popup && !popup.contains(event.target) && !togglePopupButton.contains(event.target)) {
            popupIndex = null; // Set popupIndex to null
            popup.style.display = "none"; // Hide the popup
        }
    });

    // Sample toggle button to open/close the popup (for demonstration purposes)
    document.querySelector('.dots').addEventListener('click', function (event) {
        event.stopPropagation(); // Prevent the click from triggering document's listener
        TogglePopup(1); // Toggle popup visibility for demonstration
    });


</script>