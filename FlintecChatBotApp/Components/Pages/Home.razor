@page "/"
@inject IJSRuntime JSRuntime
@using FlintecChatBotApp.Components.Models;
@using System.Linq;


@using System.Globalization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<MyStrings> Localizer



<div data-name="a" style="background-color:black; display: flex; height:100vh; ">
    <div data-name="b" 
         style="background-color:gray; width:@(isBVisible ? "20%" : "0%"); height:100%;  transition: width 0.3s ease;
                position:relative; overflow:hidden">


        @if (isBVisible)
        {

            <Icons OnCreateNewConversation="CreateNewConversation" OnbOff="bOff" IconMargin="margin-right: 100px;" />


            <div style="overflow:scroll;  overflow-x: hidden; ">

            @foreach (var dict in userConversation.conversations.Select((conversation, listIndex) => new { conversation, listIndex }))
            {
                <div class="hover-light">
                    <p class="paragraph @(activeIndex == dict.listIndex || currentIndex == dict.listIndex ? "highlighted" : "")"
                       @onclick="() => { SetActiveParagraph(dict.listIndex); GetConversation(dict.listIndex); }">
                        @(string.Join(" ", dict.conversation).Length > 10
                            ? string.Join(" ", dict.conversation).Substring(0, 10) + "..."
                            : string.Join(" ", dict.conversation))
                    </p>
                    <div class="dots" @onclick="() => TogglePopup(dict.listIndex)">...</div>
                    <button @onclick="() => GetConversation(dict.listIndex)">Get</button>
                    <button @onclick="() => userConversation.DeleteConversation(dict.listIndex)">Delete</button>

                    <!-- Popup -->
                    @if (popupIndex == dict.listIndex)
                    {
                        <div class="popup">
                            <p>Popup Content for Conversation @dict.listIndex</p>

                                <button>Button with no action</button>
                                <button >Button with no action</button>
                                <button>Button with no action</button>
                                <button>Button with no action</button>


                            <button @onclick="() => DoSomething(dict.listIndex)">Action</button>
                            <button @onclick="() => popupIndex = -1">Close</button>
                        </div>
                    }
                </div>
            }

            <div style="position: absolute; bottom: 0; width: 100%; background-color: yellow;">
                <button style="width: 100%;" @onclick="ShowSettingsPopup">
                    Settings
                </button>
            </div>


            </div>
 
            <Settings IsVisible="isSettingsPopupVisible" IsVisibleChanged="OnPopupVisibilityChanged" />

        }
    </div>

    <div class="c" style="background-color:yellow; width:@(isBVisible ? "80%" : "100%"); height:100%; transition: width 0.3s ease;">
        
        <div data-name="Header" 
            style="display: inline-flex; align-items: center;">
            @if (!isBVisible)
            {
                <Icons OnCreateNewConversation="CreateNewConversation" OnbOff="bOff" IconMargin="margin-right: 10px;"  />

            }

            <h4 class="ChatMessageWindowHeader" style="margin: 0;">Flintec</h4>
        </div>


        <div data-name="InnerChat" id="messages"
             style="background-color:mediumaquamarine; width: 800px; margin: 0 auto; height: 100vh; display: flex; flex-direction: column;
                    justify-content:center; align-items:center">

            <div data-name="Messages" style="background-color: palegreen; flex: 1; overflow-y: auto;">
                @if (messages.Count > 0)
                {
                    <p>No: @messages.Count</p>

                    @foreach (var item in messages.Select((message, index) => new { message, index }))
                    {
                        @if (item.index != messages.Count - 1)
                        {
                            <p>@item.message</p>
                            <button @onclick="() => userConversation.EditMessage(item.index)">Edit</button>
                        }
                        else if (item.index == messages.Count - 1)
                        {
                            <div class="wrapper">
                                <p id="text">@item.message</p>
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="wrapper">
                        <p id="text">How Can I help you </p>
                    </div>
                }
            </div>

            <div data-name="inputWrapper"
                style="display: flex; justify-content:center; align-items: center; background-color: blanchedalmond; border-radius: 5px; overflow: hidden;
                    width: 100%;  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);">

                <textarea type="text"
                            id="auto-resize-textarea"
                            class="inputBar"
                            @bind="userQuestion"
                            placeholder="@Localizer["Message Flintec AI"]"
                            @onkeypress="EnterKeyPressed"
                            style="flex: 1; border: none; padding: 8px; resize: none;">
                </textarea>

                <button class="sendButton"
                        style="padding: 0px 20px; background-color: #1b6ec2; color: #fff; border: none; cursor: pointer;
                                border-left: 1px solid #ddd; height: 100%; margin-right: 15px; margin-bottom: 20px; margin-top:20px;"
                        @onclick="UserSubmitQuestion">
                    Send
                </button>
            </div>

               
   

            <div style="background-color:purple;text-align: center; padding-bottom:10px; color: white;">
                <p>@Localizer["For more details"]</p>
            </div>

        </div>
       

    </div>
</div>




@code {
    private bool isBVisible = true;

    public void bOff()
    {
        isBVisible = !isBVisible;
    }
}



@code {

    public bool isSliderVisible = true;

    public void Slider()
    {
            if (isSliderVisible == true)
                isSliderVisible = false;

            else
                isSliderVisible = true;
    }




    private bool isSettingsPopupVisible = false;

    private void ShowSettingsPopup()
    {
        isSettingsPopupVisible = true;
    }

    private void OnPopupVisibilityChanged(bool value)
    {
        isSettingsPopupVisible = value;
    }






}




<style>
* {
    box-sizing: border-box;
    margin: 0;
}

.wrapper {
    /*   height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: white;
        margin: 0 5rem; */
}

#text {
    max-width: 800px;
    text-align: left;
    width: 100%;
    color: black;
    font-family: monospace;
    font-size: 1.8rem;
    -webkit-font-smoothing: antialiased;
    margin-bottom: 8rem;
}

    #text.typing span:last-child {
        background-color: black;
    }
</style>

<script>
    window.animateTextTyping = (elementId) => {
        const node = document.getElementById(elementId);
        const text = node.textContent;
        const chars = text.split("");

        node.innerHTML = "";
        node.classList.add("typing");
        let i = 0;

        const addNextChar = (i) => {
            let nextChar = chars[i] === "\n" ? "<br>" : chars[i];
            node.innerHTML += "<span>" + nextChar + "</span>";
            if (i < chars.length - 1) {
                setTimeout(function () {
                    addNextChar(i + 1);
                }, 10 + Math.random() * 100);
            } else {
                setTimeout(function () {
                    node.classList.remove("typing");
                }, 10 + Math.random() * 150);
            }
        }

        addNextChar(i);
    }

    window.showText = (elementId) => {
        const node = document.getElementById(elementId);
        node.style.display = "block"; // Show the text element
    }
</script>

@code {

    public string lang = "nl";

    private async Task AnimateText()
    {
        try
        {
            // Show the text element first
            await JSRuntime.InvokeVoidAsync("showText", "text");

            // Then start the text animation
            await JSRuntime.InvokeVoidAsync("animateTextTyping", "text");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}"); // Log the error message to the console
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred: " + ex.Message);
        }
    }
}


<script>
    // Function to scroll to the bottom
    function scrollToBottom() {
        const messagesDiv = document.getElementById("messages");
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    // Call scrollToBottom whenever new content is added
    // For example, after appending new messages
    scrollToBottom();
</script>



<style>
    .dots {
        display: inline-block; /* Allows the dots to be inline with the paragraph */
        cursor: pointer; /* Change cursor to indicate clickable */
        margin-left: 5px; /* Space between paragraph and dots */
    }

    .popup {
        position: absolute; /* Positioning the popup */
        background-color: white; /* Background color for popup */
        border: 1px solid #ccc; /* Optional border */
        padding: 10px; /* Padding inside the popup */
        z-index: 100; /* Ensure it appears above other elements */
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow for effect */
    }




    .paragraph {
        position: relative; /* Allows for absolute positioning of the dots */
    }

        .paragraph::after {
            content: '...'; /* The three dots */
            position: absolute; /* Positioning the dots */
            right: 0; /* Aligns the dots to the right */
            top: 50%; /* Vertically centers the dots */
            transform: translateY(-50%); /* Adjusts the dots for perfect vertical alignment */
            opacity: 0; /* Initially hidden */
            transition: opacity 0.3s ease; /* Smooth transition for opacity */
        }

        /* Show dots on hover or when highlighted */
        .paragraph:hover::after,
        .paragraph.highlighted::after {
            opacity: 1; /* Show the dots */
        }




</style>



@code {
    private int popupIndex = -1; // Default value for no popup

    private void TogglePopup(int index)
    {
        popupIndex = popupIndex == index ? -1 : index; // Toggle the popup
    }

    private void DoSomething(int index)
    {
        // Implement the action you want to take when clicking the action button in the popup
        // For example: GetConversation(index);
    }
}

 @code {
    private int? activeIndex = null;
    private int? currentIndex = null; // Add currentIndex variable

    private void SetActiveParagraph(int index)
    {
        activeIndex = index;
        currentIndex = index; // Set currentIndex when an item is clicked
    }
}


<style>
    .hover-light p:hover,
    .paragraph.highlighted {
        background-color: #d0e0ff; /* Same color for hover, active, and current */
        transition: background-color 0.3s ease;
    }

</style>