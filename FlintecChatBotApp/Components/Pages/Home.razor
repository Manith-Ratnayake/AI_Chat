@page "/"
@inject IJSRuntime JSRuntime
@using FlintecChatBotApp.Components.Models;
@using System.Linq;
@using Microsoft.JSInterop;

@using System.Globalization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<MyStrings> Localizer


@*
     <p class="paragraph @(activeIndex == dict.listIndex || currentIndex == dict.listIndex ? "highlighted" : "")"
                                 @onclick="() => { SetActiveParagraph(dict.listIndex); GetConversation(dict.listIndex); }"
                                 style="margin: 0; flex: 1; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; cursor: pointer;">
                                  @(string.Join(" ", dict.conversation).Length > 10
                                      ? string.Join(" ", dict.conversation).Substring(0, 10)
                                      : string.Join(" ", dict.conversation))
                              </p>

*@




<div data-name="a" style="background-color:darkgray; display: flex; height:100vh; ">

    <div data-name="b"
         style="background-color:gray; width:@(isBVisible ? "20%" : "0%"); height:100%;  transition: width 0.3s ease;
                position:relative; overflow:hidden; z-index:1000;">


        @if (isBVisible)
        {

            <Icons OnCreateNewConversation="CreateNewConversation" OnbOff="bOff" IconMargin="margin-right: 100px;" />


                <div data-name="Tabs" 
                     style="overflow-x: hidden;">


                    @foreach (var dict in userConversation.conversations.Select((conversation, listIndex) => new { conversation, listIndex }))
                    {
                       <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px; margin-left:15px;">


                        <p class="paragraph @(activeIndex == dict.listIndex || currentIndex == dict.listIndex ? "highlighted" : "")"
                           @onclick="() => { SetActiveParagraph(dict.listIndex); GetConversation(dict.listIndex); }"
                           style="margin: 0; flex: 1; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; cursor: pointer;">
                            @(string.Join(" ", dict.conversation).Length > 10
                                ? string.Join(" ", dict.conversation).Substring(0, 10)
                                : string.Join(" ", dict.conversation))
                        </p>
                        <span class="dots" @onclick="() => TogglePopup(dict.listIndex)" style="cursor: pointer;">
                            ...
                        </span>
                    </div>

                    @if (popupIndex == dict.listIndex)
                    {
                        <div style="
                                     position: fixed;
                                     z-index: 90000; /* Higher z-index to appear on top */
                                     display: flex;
                                     flex-direction: column;
                                     gap: 8px;
                                     background-color: dimgrey;
                                     padding: 8px;
                                     border-radius: 4px;
                                     margin-left:15%;" id="popup233">

                            <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px;
                                        transition: background-color 0.1s; color:white;"
                                 onmouseover="this.style.backgroundColor='#e0e0e0'"
                                 onmouseout="this.style.backgroundColor='transparent'">
                                <img src="WebIcons/share.png" style="width: 10px; height: 10px; filter: brightness(0) invert(1);" />
                                <button style="border: none; background: none; cursor: pointer; color:white;">Share</button>
                            </div>

                            <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px; transition: background-color 0.1s;"
                                 onmouseover="this.style.backgroundColor='#e0e0e0'"
                                 onmouseout="this.style.backgroundColor='transparent'">
                                <img src="WebIcons/edit.png" style="width: 20px; height: 20px;" />
                                <button style="border: none; background: none; cursor: pointer;">Rename</button>
                            </div>

                            <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px; transition: background-color 0.1s;"
                                 onmouseover="this.style.backgroundColor='#e0e0e0'"
                                 onmouseout="this.style.backgroundColor='transparent'">
                                <img src="WebIcons/archive.png" style="width: 20px; height: 20px;" />
                                <button style="border: none; background: none; cursor: pointer;">Archive</button>
                            </div>

                            <div style="display: flex; align-items: center; gap: 8px; padding: 5px; border-radius: 4px; transition: background-color 0.1s;"
                                 onmouseover="this.style.backgroundColor='#e0e0e0'"
                                 onmouseout="this.style.backgroundColor='transparent'">
                                <img src="WebIcons/delete.png" style="width: 20px; height: 20px;" />
                                <button style="border: none; background: none; cursor: pointer;"
                                        @onclick="() => userConversation.DeleteConversation(dict.listIndex)">
                                    Delete
                                </button>
                            </div>
                        </div>
                    }
                        
                    }   

                <div style="position: absolute; bottom: 0; width: 100%; background-color: darkgray;">
                    <button style="width: 100%;" @onclick="ShowSettingsPopup">
                        Settings
                    </button>
                </div>


            </div>

            <Settings IsVisible="isSettingsPopupVisible" IsVisibleChanged="OnPopupVisibilityChanged" />

        }
    </div>

    <div class="c" style="background-color:darkgray; width:@(isBVisible ? "80%" : "100%"); height:100%; transition: width 0.3s ease;">

        <div data-name="Header"
             style="display: inline-flex; align-items: center;">
            @if (!isBVisible)
            {
                <Icons OnCreateNewConversation="CreateNewConversation" OnbOff="bOff" IconMargin="margin-right: 10px;" />

            }

            <h4 data-name="ChatMessageWindowHeader" style="margin: 0;">Flintec</h4>
        </div>


       
        @if (messages.Count > 0)
        {

            <div style="background-color:wheat; height:85%; overflow: auto;">

                @foreach (var item in messages.Select((message, index) => new { message, index }))
                {



                    if (item.index == 0 || item.index % 2 == 0)
                    {
                        <div data-name="UserMessages"
                             style="display: flex; flex-direction: column; width: 100%; padding-right: 250px; position: relative;">

                            <!-- Flex container for message and edit icon -->
                            <div style="display: flex; align-items: center; justify-content: flex-end; width: 100%;">

                                <!-- Edit icon container, hidden by default and shown on hover -->
                                <div class="edit-icon"
                                     style="cursor: pointer; border-radius: 15px; margin-right: 8px; display: none;"
                                     onmouseover="this.style.backgroundColor='grey'"
                                     onmouseout="this.style.backgroundColor='transparent'"
                                     @onclick="ToggleEditMoo">
                                    <img src="WebIcons/edit.png" style="width: 10px; height: 10px; margin-right: 8px;" />
                                </div>

                                <!-- Message content -->
                                @if (!isEditingMessage)
                                {
                                    <p style="max-width: 45%; word-wrap: break-word; overflow-wrap: break-word; background-color: lightslategrey;
                                                  padding: 9px 15px; border-radius: 19px; margin: 0;">
                                        @item.message
                                    </p>
                                }
                                else if (isEditingMessage)
                                {
                                    <!-- Editing mode with buttons -->
                                    <div style="display: flex; flex-direction: column; align-items: flex-end; max-width: 750px; background-color: lightslategrey; padding: 9px 15px; border-radius: 19px; margin: 0; word-break: break-word; overflow-wrap: break-word;">

                                        <p style="margin: 0; word-wrap: break-word; overflow-wrap: break-word; width: 100%;">
                                            @item.message
                                        </p>

                                        <!-- Buttons for editing mode below the message -->
                                        <div data-name="WhenEditCliked" style="display: flex; gap: 10px; margin-top: 10px;">
                                            <button @onclick="CancelEditMoo" style="padding: 5px 10px;">Cancel</button>
                                            <button @onclick="SubmitEditMoo" style="padding: 5px 10px;">Submit</button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                    }


                    else
                    {

                        <div data-name=" Chat Response" 
                            style="background-color:yellow; position:relative">


                            <div data-name="flintec_logo_div"
                                 style="border: 1px solid black; height: 35px; width: 35px; border-radius: 50%; 
                                        display: flex; justify-content: center; align-items: center;
                                        background-color: aqua; 
                                        margin-left:100px; margin-top:5%">

                                <img src="WebIcons/flintec_logo.png" style="height: 22px; width: 22px;" />
                            </div>



                            <div data-name="Respone Message  div"
                                  style="margin-right: auto; margin-left:170px; max-width: 800px; word-wrap: break-word;
                                        overflow-wrap: break-word;">
                               
                            
                            @if (item.index == messages.Count - 1)
                                {

                                    <div class="wrapper" style="background-color:cadetblue;">
                                        <p id="text">@item.message</p>
                                    </div>
                                }


                                else
                                {

                                    <p>@item.message</p>
                                }

                                <div>

                                        <div style="display: inline-flex; align-items: center; justify-content: center; width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                             onmouseover="this.style.backgroundColor='lightgray'"
                                             onmouseout="this.style.backgroundColor='transparent'">
                                            <img src="WebIcons/speaker.png" style="width:20px; height:20px; color:black;" />
                                        </div>

                                        <div style="display: inline-flex; align-items: center; justify-content: center; width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                             onmouseover="this.style.backgroundColor='lightgray'"
                                             onmouseout="this.style.backgroundColor='transparent'">
                                            <img src="WebIcons/copy.png"     @onclick="CopyTextToClipboard"
                                                 style="width:20px; height:20px; color:black;" />
                                        </div>

                                        <div style="display: inline-flex; align-items: center; justify-content: center; width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                             onmouseover="this.style.backgroundColor='lightgray'"
                                             onmouseout="this.style.backgroundColor='transparent'">
                                            <img src="WebIcons/thumbsup.png" style="width:20px; height:20px; color:black;" />
                                        </div>

                                        <div style="display: inline-flex; align-items: center; justify-content: center; width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                             onmouseover="this.style.backgroundColor='lightgray'"
                                             onmouseout="this.style.backgroundColor='transparent'">
                                            <img src="WebIcons/thumbsdown.png" style="width:20px; height:20px; color:black;" />
                                        </div>

                                        <div style="display: inline-flex; align-items: center; justify-content: center; width: 30px; height: 30px; border-radius: 5px; transition: background-color 0.3s;"
                                             onmouseover="this.style.backgroundColor='lightgray'"
                                             onmouseout="this.style.backgroundColor='transparent'">
                                            <img src="WebIcons/reload.png" style="width:20px; height:20px; color:black;" />
                                        </div>

                                    </div>

                            </div>


                            </div>
                    }


                }


            </div>


           @*  <div data-name="InputArea" style="background-color: yellow; width: 100%; border-radius: 25px;">
                <div class="wrapperTextArea"
                     style="display: flex; align-items: center; background-color: yellow; overflow: hidden; flex: 1; position: relative; border-radius: 25px;">

                    <textarea @bind="userQuestion"
                              @oninput="ResizeTextArea"
                              placeholder="@Localizer["Message Flintec AI"]"
                              style="resize: none; background-color: yellowgreen; margin-left: 5%; width: 87%; margin-right: 5%; overflow: hidden; line-height: 1.5;"
                              rows="1">
                                 </textarea>

                    <div style="position: absolute; right: 10px; width: 36px; height: 36px; border-radius: 50%; background-color: @sendButtonColor;"
                         @onclick="UserSubmitQuestion">
                        <img src="WebIcons/up_arrow.png" style="width: 20px; height: 20px;" alt="Submit" />
                    </div>
                </div>
            </div>
 *@

        }
        else
        {

            <div style="background-color: tomato; min-height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                <div style="display: flex; flex-direction: column; align-items: center; width: 60%; flex: 1; justify-content: center;">

                    <p style="font-size: 30px;">How Can I Help You?</p>

                    <div data-name="InputArea" style="background-color: yellow; width: 100%; border-radius: 25px;">
                        <div class="wrapperTextArea"
                             style="display: flex; align-items: center; background-color: yellow; overflow: hidden; flex: 1; position: relative; border-radius: 25px;">

                            <textarea @bind="userQuestion"
                                      @oninput="ResizeTextArea"
                                      placeholder="@Localizer["Message Flintec AI"]"
                                      style="resize: none; background-color: yellowgreen; margin-left: 5%; width: 87%; margin-right: 5%; overflow: hidden; line-height: 1.5;"
                                      rows="1">
                             </textarea>

                            <div style="position: absolute; right: 10px; width: 36px; height: 36px; border-radius: 50%; background-color: @sendButtonColor;"
                                 @onclick="UserSubmitQuestion">
                                <img src="WebIcons/up_arrow.png" style="width: 20px; height: 20px;" alt="Submit" />
                            </div>
                        </div>
                    </div>


                    <div style="display: flex; justify-content: space-between; flex-wrap: wrap;
                                     background-color: thistle; width: 100%; margin-top: 20px;">

                        @foreach (var suggestion in suggestions)
                        {
                            <div style="background-color: yellow; border: 2px solid purple; border-radius: 10px; padding: 10px;
                            margin: 5px; flex: 1; min-width: 150px; text-align: center;"
                                 @onclick="() => UpdateTheSearchBar(suggestion)">
                                @suggestion
                            </div>
                        }
                    </div>

                </div>
         



                <div style="background-color: purple; text-align: center; color: white; width: 100%; padding: 10px;">
                    <p>@Localizer["For more details"]</p>
                </div>


            </div>

        }

    </div>





</div>










<style >
    /* Set visibility of the edit icon when the "User Messages" div is hovered */
    [data-name="User Messages"]:hover .edit-icon {
        visibility: visible;
    }
</style>









@code {
    public void UpdateTheSearchBar(string suggestion)
    {
        userQuestion = suggestion;
    }
}




<style>
    .wrapperTextArea textarea {
        width: 100%;
        height: 59px;
        padding: 15px;
        border-radius: 5px;
        outline: none;
        resize: none;
        overflow: hidden;
        transition: border-color 0.3s, padding 0.3s; 
        max-height: 200px; 
    }

        .wrapperTextArea textarea:focus,
        .wrapperTextArea textarea:valid {
            border-width: 2px;
            padding: 14px;
            border-color: red;
        }
</style>


<script>
    const textarea = document.querySelector("textarea");
    const maxHeight = 200; // Set your desired maximum height

    textarea.addEventListener("input", e => {
        textarea.style.height = "59px"; // Reset height
        let scHeight = e.target.scrollHeight; // Get the new scroll height

        textarea.style.height = `${Math.min(scHeight, maxHeight)}px`;

        if (scHeight > maxHeight) {
            textarea.style.overflow = "auto";
        } else {
            textarea.style.overflow = "hidden"; // Reset overflow to hidden if below maxHeight
        }
    });
</script>


<script>

    function autoResizeTextArea(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = (textarea.scrollHeight) + 'px';
    }



</script>




@code {
   private List<string> suggestions = new List<string>
{
    "What is the password policy?",
    "What are the policies for backup?",
    "What are the policies for Microsoft 0365?",
    "What is the acceptable use policy?"
};

}

@code {

    private async Task ResizeTextArea(ChangeEventArgs e)
    {
        //await JSRuntime.InvokeVoidAsync("autoResizeTextArea", e.Value);
    }



    private async Task CopyTextToClipboard()
    {
        string textToCopy = "This is the text to be copied to the clipboard.";
        await JSRuntime.InvokeVoidAsync("copyToClipboard", userAnswer);
    }
}


<script>

function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(function () {
        console.log('Text copied to clipboard: ' + text);
    }).catch(function (error) {
        console.error('Error copying text: ', error);
    });
}


</script>









@code {

    private string sendButtonColor { get; set; } = "gray"; // Default color
    private int clickedTimes = 0;

    private void UpdateButtonColor()
    {
        JSRuntime.InvokeVoidAsync("console.log", "Send Button clicked");
        sendButtonColor = string.IsNullOrWhiteSpace(userQuestion) ? "red" : "pink";

        if (string.IsNullOrWhiteSpace(userQuestion))
        {
            JSRuntime.InvokeVoidAsync("console.log", $"{clickedTimes} red");

            JSRuntime.InvokeVoidAsync("console.log", $"content : {userQuestion} ");


        }

        else
        {
            JSRuntime.InvokeVoidAsync("console.log", $"{clickedTimes} Pink");
            JSRuntime.InvokeVoidAsync("console.log", $"content : {userQuestion} ");


        }
        clickedTimes++;

    }




}


@code {
    private bool isBVisible = true;

    public void bOff()
    {
        isBVisible = !isBVisible;
    }
}


@code {

    public bool isSliderVisible = true;

    public void Slider()
    {
        if (isSliderVisible == true)
            isSliderVisible = false;

        else
            isSliderVisible = true;
    }




    private bool isSettingsPopupVisible = false;

    private void ShowSettingsPopup()
    {
        isSettingsPopupVisible = true;
    }

    private void OnPopupVisibilityChanged(bool value)
    {
        isSettingsPopupVisible = value;
    }



}




<style>
    * {
        box-sizing: border-box;
        margin: 0;
    }

    .wrapper {
        /*   height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: white;
            margin: 0 5rem; */
    }

    #text {
        max-width: 800px;
        text-align: left;
        width: 100%;
        color: black;
        font-family: monospace;
        -webkit-font-smoothing: antialiased;
        margin-bottom: 8rem;
    }

        #text.typing span:last-child {
            background-color: black;
        }
</style>

<script>
    window.animateTextTyping = (elementId) => {
        const node = document.getElementById(elementId);
        const text = node.textContent;
        const chars = text.split("");

        node.innerHTML = "";
        node.classList.add("typing");
        let i = 0;

        const addNextChar = (i) => {
            let nextChar = chars[i] === "\n" ? "<br>" : chars[i];
            node.innerHTML += "<span>" + nextChar + "</span>";
            if (i < chars.length - 1) {
                setTimeout(function () {
                    addNextChar(i + 1);
                }, 10 + Math.random() * 100);
            } else {
                setTimeout(function () {
                    node.classList.remove("typing");
                }, 10 + Math.random() * 150);
            }
        }

        addNextChar(i);
    }

    window.showText = (elementId) => {
        const node = document.getElementById(elementId);
        node.style.display = "block"; // Show the text element
    }
</script>

@code {

    public string lang = "nl";

    private async Task AnimateText()
    {
        try
        {
            // Show the text element first
            await JSRuntime.InvokeVoidAsync("showText", "text");

            // Then start the text animation
            await JSRuntime.InvokeVoidAsync("animateTextTyping", "text");
        }
        catch (Exception ex)
        {
            JSRuntime.InvokeVoidAsync("console.log", $"{ex.Message}"); // Log the error message to the console
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred: " + ex.Message);
        }
    }
}


<script>
    // Function to scroll to the bottom
     @* function scrollToBottom() {
         const messagesDiv = document.getElementById("messages");
         messagesDiv.scrollTop = messagesDiv.scrollHeight;
     } *@

    // Call scrollToBottom whenever new content is added
    // For example, after appending new messages
    //scrollToBottom();
</script>



<style>
    .dots {
        display: inline-block; /* Allows the dots to be inline with the paragraph */
        cursor: pointer; /* Change cursor to indicate clickable */
        margin-left: 5px; /* Space between paragraph and dots */
    }

    .popup {
        position: absolute; /* Positioning the popup */
        background-color: white; /* Background color for popup */
        border: 1px solid #ccc; /* Optional border */
        padding: 10px; /* Padding inside the popup */
        z-index: 100; /* Ensure it appears above other elements */
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow for effect */
        margin-left:20px;
    }




    .paragraph {
        position: relative; /* Allows for absolute positioning of the dots */
        background-color: dimgrey;
    }

        .paragraph::after {
            content: '...'; /* The three dots */
            position: absolute; /* Positioning the dots */
            right: 0; /* Aligns the dots to the right */
            top: 50%; /* Vertically centers the dots */
            transform: translateY(-50%); /* Adjusts the dots for perfect vertical alignment */
            opacity: 0; /* Initially hidden */
            transition: opacity 0.3s ease; /* Smooth transition for opacity */
        }

        /* Show dots on hover or when highlighted */
        .paragraph:hover::after,
        .paragraph.highlighted::after {
            opacity: 1; /* Show the dots */
        }

</style>



@code {
    private int popupIndex = -1; // Default value for no popup

    private void TogglePopup(int index)
    {
        popupIndex = popupIndex == index ? -1 : index; // Toggle the popup
    }

    private void DoSomething(int index)
    {
        // Implement the action you want to take when clicking the action button in the popup
        // For example: GetConversation(index);
    }
}

 @code {
    private int? activeIndex = null;
    private int? currentIndex = null; // Add currentIndex variable

    private void SetActiveParagraph(int index)
    {
        activeIndex = index;
        currentIndex = index; // Set currentIndex when an item is clicked
    }
}


<style>
    .hover-light p:hover,
    .paragraph.highlighted {
        background-color: #d0e0ff; /* Same color for hover, active, and current */
        transition: background-color 0.3s ease;
    }

</style>

@code {

    // protected override async Task OnInitializedAsync()
    // {
    //     var response = await CoPilotService.SendRequestAsync();
    //     if (response.IsSuccessStatusCode)
    //     {
    //         Process response data
    //     }
    //     else
    //     {
    //         Handle error
        //     }
    // }
}




@code {
    private bool isEditingMessage = false;

    // Method to toggle the edit state
    private void ToggleEditMoo()
    {
        isEditingMessage = true;
    }

    // Method to cancel the edit
    private void CancelEditMoo()
    {
        isEditingMessage = false;
    }

    // Method to submit the edit
    private void SubmitEditMoo()
    {
        // Your logic to submit the edited message
        isEditingMessage = false;
    }
}

<script>
document.addEventListener("click", function(event) {
    const popup = document.getElementById("popup233");
    const togglePopupButton = document.querySelector('.dots');  // Adjust the selector if needed

    if (popup && !popup.contains(event.target) && !togglePopupButton.contains(event.target)) {
        // Close the popup if the click is outside the popup and the toggle button
        // You can call your TogglePopup function here or update the `popupIndex` accordingly
        popupIndex = null;  // Or your function to hide the popup
    }
});


</script>