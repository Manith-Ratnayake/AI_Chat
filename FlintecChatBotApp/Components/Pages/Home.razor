@page "/"
@inject IJSRuntime JSRuntime
@using FlintecChatBotApp.Components.Models;
@using System.Linq;
@inject IStringLocalizer<langu> Localizer;



<div data-name="a" style="background-color:black; display: flex; height:100vh; ">
    <div data-name="b" 
         style="background-color:gray; width:@(isBVisible ? "20%" : "0%"); height:100%; overflow:hidden; transition: width 0.3s ease;
                position:relative;">


        @if (isBVisible)
        {

            <img @onclick="bOff" src="WebIcons/sidebar.png" style="height:30px; width:30px; filter: grayscale(100%) brightness(60%) contrast(90%);" alt="SideBar" />
            <img @onclick="() => CreateNewConversation()" src="WebIcons/new.png" style="height:30px; width:30px; filter: grayscale(100%) brightness(60%) contrast(90%);" alt="New Chat" />



            @foreach (var dict in userConversation.conversations.Select((conversation, listIndex) => new { conversation, listIndex }))
            {
                <div>
                    <p>@string.Join(" ", dict.conversation)</p>
                    <button @onclick="() => GetConversation(dict.listIndex)">Get</button>
                    <button @onclick="() => userConversation.DeleteConversation(dict.listIndex)">Delete</button>
                </div>
            }

            <div style="position: absolute; bottom: 0; width: 100%; background-color: yellow;">
                <button style="width: 100%;" @onclick="ShowSettingsPopup">
                    Settings
                </button>
            </div>
 
            <Settings IsVisible="isSettingsPopupVisible" IsVisibleChanged="OnPopupVisibilityChanged" />

        }
    </div>

    <div class="c" style="background-color:yellow; width:@(isBVisible ? "80%" : "100%"); height:100%; transition: width 0.3s ease;">
        
        <div data-name="Header" 
            style="display: inline-flex; align-items: center;">
            @if (!isBVisible)
            {
                <img @onclick="bOff" src="WebIcons/sidebar.png" style="height:30px; width:30px; filter: grayscale(100%) brightness(60%) contrast(90%); margin-right: 10px;" alt="SideBar" />
                <img @onclick="() => CreateNewConversation()" src="WebIcons/new.png" style="height:30px; width:30px; filter: grayscale(100%) brightness(60%) contrast(90%); margin-right: 10px;" alt="New Chat" />
            }

            <h4 class="ChatMessageWindowHeader" style="margin: 0;">Flintec</h4>
        </div>
        <div data-name="InnerChat" id="messages"
             style="background-color: aquamarine; width: 800px; margin: 0 auto; height: 100vh; display: flex; flex-direction: column;">

            <div data-name="Messages" style="background-color: palegreen; flex: 1; overflow-y: auto;">
                @if (messages.Count > 0)
                {
                    <p>No: @messages.Count</p>

                    @foreach (var item in messages.Select((message, index) => new { message, index }))
                    {
                        @if (item.index != messages.Count - 1)
                        {
                            <p>@item.message</p>
                            <button @onclick="() => userConversation.EditMessage(item.index)">Edit</button>
                        }
                        else if (item.index == messages.Count - 1)
                        {
                            <div class="wrapper">
                                <p id="text">@item.message</p>
                            </div>
                        }
                    }
                }
                else
                {
                    <p id="text">@messages.Count()</p>
                }
            </div>

            <div data-name="InputArea" style="width: 100%;  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);">
                <div data-name="inputWrapper" style="display: flex; align-items: center; background-color: white; border-radius: 5px; overflow: hidden;">
                    <textarea type="text"
                              id="auto-resize-textarea"
                              class="inputBar"
                              @bind="userQuestion"
                              placeholder="Type your message here..."
                              @onkeypress="EnterKeyPressed"
                              style="flex: 1; border: none; padding: 8px; resize: none;">
            </textarea>

                    <button class="sendButton"
                            style="padding: 8px 16px; background-color: #1b6ec2; color: #fff; border: none; cursor: pointer;
                                    border-left: 1px solid #ddd; height: 100%; margin-right: 15px;"
                            @onclick="UserSubmitQuestion">
                        Send
                    </button>
                </div>

                <div style="background-color:purple;text-align: center; padding-bottom:10px; color: white;">
                    <p>@Localizer["For more details"]</p>
                </div>
            </div>

        </div>
       

    </div>
</div>




@code {
    private bool isBVisible = true;

    public void bOff()
    {
        isBVisible = !isBVisible;
    }
}



@code {

    public bool isSliderVisible = true;

    public void Slider()
    {
            if (isSliderVisible == true)
                isSliderVisible = false;

            else
                isSliderVisible = true;
    }




    private bool isSettingsPopupVisible = false;

    private void ShowSettingsPopup()
    {
        isSettingsPopupVisible = true;
    }

    private void OnPopupVisibilityChanged(bool value)
    {
        isSettingsPopupVisible = value;
    }






}




<style>
    * {
        box-sizing: border-box;
        margin: 0;
    }

    .wrapper {
       /*   height: 100vh;
         display: flex;
         justify-content: center;
         align-items: center;
         background-color: white;
         margin: 0 5rem; */
    }

    #text {
        max-width: 800px;
        text-align: left;
        width: 100%;
        color: black;
        font-family: monospace;
        font-size: 1.8rem;
        -webkit-font-smoothing: antialiased;
        margin-bottom: 8rem;
    }

        #text.typing span:last-child {
            background-color: black;
        }
</style>

<script>
    window.animateTextTyping = (elementId) => {
        const node = document.getElementById(elementId);
        const text = node.textContent;
        const chars = text.split("");

        node.innerHTML = "";
        node.classList.add("typing");
        let i = 0;

        const addNextChar = (i) => {
            let nextChar = chars[i] === "\n" ? "<br>" : chars[i];
            node.innerHTML += "<span>" + nextChar + "</span>";
            if (i < chars.length - 1) {
                setTimeout(function () {
                    addNextChar(i + 1);
                }, 10 + Math.random() * 100);
            } else {
                setTimeout(function () {
                    node.classList.remove("typing");
                }, 10 + Math.random() * 150);
            }
        }

        addNextChar(i);
    }

    window.showText = (elementId) => {
        const node = document.getElementById(elementId);
        node.style.display = "block"; // Show the text element
    }
</script>

@code {

    public string lang = "nl";

    private async Task AnimateText()
    {
        try
        {
            // Show the text element first
            await JSRuntime.InvokeVoidAsync("showText", "text");

            // Then start the text animation
            await JSRuntime.InvokeVoidAsync("animateTextTyping", "text");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}"); // Log the error message to the console
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred: " + ex.Message);
        }
    }
}


<script>
    // Function to scroll to the bottom
    function scrollToBottom() {
        const messagesDiv = document.getElementById("messages");
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    // Call scrollToBottom whenever new content is added
    // For example, after appending new messages
    scrollToBottom();
</script>