@page "/"
@inject IJSRuntime JSRuntime
@using FlintecChatBotApp.Components.Models;
@using System.Linq;
@inject IStringLocalizer<langu> Localizer;



<div class="Header">
   

    
</div>



<div class="Chat">
    

        <div class="ChatTabs">
    
            
            <div class="ChatTabHeader">
                <button @onclick="() => Slider()">Slider</button>
                <button @onclick="() => CreateNewConversation()">New tab</button>
            </div>



            @foreach (var dict in userConversation.conversations.Select((conversation, listIndex) => new { conversation, listIndex }))
            {
                <div>
                    <p>@string.Join(" ", dict.conversation)</p>
                    <button @onclick="() => GetConversation(dict.listIndex)">Get</button>
                    <button @onclick="() => userConversation.DeleteConversation(dict.listIndex)">Delete</button>
                </div>
            }



        <div class="SettingButton">
            <button @onclick="ShowPopup">Settings</button>
        </div>


        <Settings IsVisible="isPopupVisible" IsVisibleChanged="OnPopupVisibilityChanged" />


        <button @onclick="()=> SetCulture(lang)">@Localizer["hello"]</button>


        <p>@Localizer["hello"]</p>

    </div>


       





    <div class="ChatWindow" style="background-color:red">

        <div class="ChatMessageWindowHeader">Flintec</div>



        <div class="DisplayMessageArea">
   


            @if (messages.Count > 0)
            {
                <p>No: @messages.Count</p>


                @foreach (var item in messages.Select((message, index) => new { message, index }))
                {


                    @if (item.index != messages.Count - 1)
                    {
                        <p>@item.message</p>
                        <button @onclick="() => userConversation.EditMessage(item.index)">Edit</button>
                    }


                  


                    else if (item.index == messages.Count - 1)
                    {
                        <div class="wrapper">
                            <p id="text">
                               @item.message
                            </p>
                        </div>
                    }

 
                }
            }


            else
            {

                <p id="text">@messages.Count()</p>
            }

        </div>
        


         <div class="inputArea" style="background-color:green">
            <div class="inputWrapper">
                <textarea type="text" id="auto-resize-textarea" class="inputBar" @bind="userQuestion" placeholder="Type your message here..." @onkeypress="EnterKeyPressed" />
                <button class="sendButton" @onclick="UserSubmitQuestion">Send</button>
            </div>

            <div class="contactTextContainer">
                <p class="contactText">@Localizer["For more details"]</p>
            </div>
        </div>


    </div>






</div>





@code {

    public bool isSliderVisible = true;

    public void Slider()
    {
            if (isSliderVisible == true)
                isSliderVisible = false;

            else
                isSliderVisible = true;
    }




    private bool isPopupVisible = false;

    private void ShowPopup()
    {
        isPopupVisible = true;
    }

    private void OnPopupVisibilityChanged(bool value)
    {
        isPopupVisible = value;
    }






}




<style>
    * {
        box-sizing: border-box;
        margin: 0;
    }

    .wrapper {
       /*   height: 100vh;
         display: flex;
         justify-content: center;
         align-items: center;
         background-color: white;
         margin: 0 5rem; */
    }

    #text {
        max-width: 800px;
        text-align: left;
        width: 100%;
        color: black;
        font-family: monospace;
        font-size: 1.8rem;
        -webkit-font-smoothing: antialiased;
        margin-bottom: 8rem;
    }

        #text.typing span:last-child {
            background-color: black;
        }
</style>

<script>
    window.animateTextTyping = (elementId) => {
        const node = document.getElementById(elementId);
        const text = node.textContent;
        const chars = text.split("");

        node.innerHTML = "";
        node.classList.add("typing");
        let i = 0;

        const addNextChar = (i) => {
            let nextChar = chars[i] === "\n" ? "<br>" : chars[i];
            node.innerHTML += "<span>" + nextChar + "</span>";
            if (i < chars.length - 1) {
                setTimeout(function () {
                    addNextChar(i + 1);
                }, 10 + Math.random() * 100);
            } else {
                setTimeout(function () {
                    node.classList.remove("typing");
                }, 10 + Math.random() * 150);
            }
        }

        addNextChar(i);
    }

    window.showText = (elementId) => {
        const node = document.getElementById(elementId);
        node.style.display = "block"; // Show the text element
    }
</script>

@code {

    public string lang = "nl";

    private async Task AnimateText()
    {
        try
        {
            // Show the text element first
            await JSRuntime.InvokeVoidAsync("showText", "text");

            // Then start the text animation
            await JSRuntime.InvokeVoidAsync("animateTextTyping", "text");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}"); // Log the error message to the console
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred: " + ex.Message);
        }
    }
}
